# This file autogenerated through https://github.com/timholy/SnoopCompile.jl.  Precompile every day!
function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Nettle.Decryptor, (String, Vector{UInt8},))
    precompile(Nettle.HMACState, (String, Vector{UInt8},))
    precompile(Nettle.CipherType, (Nettle.NettleCipher,))
    precompile(Nettle.HashType, (Nettle.NettleHash, Ptr{Cvoid},))
    precompile(Nettle.Encryptor, (String, Vector{UInt8},))
    precompile(Nettle.Hasher, (String,))
    precompile(Nettle.HMACState, (String, String,))
    precompile(Nettle.HashType, (String, UInt32, UInt32, UInt32, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid},))
    precompile(Nettle.CipherType, (String, UInt32, UInt32, UInt32, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid},))
    precompile(Nettle.encrypt!, (Nettle.Encryptor, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.decrypt!, (Nettle.Decryptor, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.digest!, (Nettle.HMACState,))
    precompile(Nettle.get_cipher_types, ())
    precompile(Nettle.get_hash_types, ())
    precompile(Nettle.digest!, (Nettle.Hasher,))
    precompile(Nettle.update!, (Nettle.HMACState, Vector{UInt8},))
    precompile(Nettle.update!, (Nettle.Hasher, String,))
    precompile(Nettle.decrypt, (String, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.update!, (Nettle.HMACState, String,))
    precompile(Nettle.encrypt, (String, Vector{UInt8}, Vector{UInt8},))
    precompile(Nettle.hexdigest!, (Nettle.Hasher,))
    precompile(Nettle.__init__, ())
end
